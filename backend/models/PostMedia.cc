/**
 *
 *  PostMedia.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PostMedia.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::augventure_db;

const std::string PostMedia::Cols::_id = "id";
const std::string PostMedia::Cols::_url = "url";
const std::string PostMedia::Cols::_type = "type";
const std::string PostMedia::Cols::_post_id = "post_id";
const std::string PostMedia::primaryKeyName = "id";
const bool PostMedia::hasPrimaryKey = true;
const std::string PostMedia::tableName = "post_media";

const std::vector<typename PostMedia::MetaData> PostMedia::metaData_ = {
    { "id", "uint32_t", "int(10) unsigned", 4, 1, 1, 1 },
    { "url", "std::string", "tinytext", 0, 0, 0, 0 },
    { "type", "std::string", "enum('image','video','other')", 0, 0, 0, 0 },
    { "post_id", "uint32_t", "int(10) unsigned", 4, 0, 0, 1 }
};
const std::string& PostMedia::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PostMedia::PostMedia(const Row& r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["id"].isNull())
        {
            id_ = std::make_shared<uint32_t>(r["id"].as<uint32_t>());
        }
        if (!r["url"].isNull())
        {
            url_ = std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if (!r["type"].isNull())
        {
            type_ = std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if (!r["post_id"].isNull())
        {
            postId_ = std::make_shared<uint32_t>(r["post_id"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if (offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            id_ = std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            url_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            type_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            postId_ = std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }
}

PostMedia::PostMedia(
    const Json::Value& pJson,
    const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint32_t>(
                (uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            url_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() &&
        pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            type_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() &&
        pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            postId_ = std::make_shared<uint32_t>(
                (uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

PostMedia::PostMedia(const Json::Value& pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("url"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["url"].isNull())
        {
            url_ = std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if (pJson.isMember("type"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["type"].isNull())
        {
            type_ = std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if (pJson.isMember("post_id"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["post_id"].isNull())
        {
            postId_ = std::make_shared<uint32_t>(
                (uint32_t)pJson["post_id"].asUInt64());
        }
    }
}

void PostMedia::updateByMasqueradedJson(
    const Json::Value& pJson,
    const std::vector<std::string>& pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint32_t>(
                (uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            url_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() &&
        pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            type_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() &&
        pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            postId_ = std::make_shared<uint32_t>(
                (uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

void PostMedia::updateByJson(const Json::Value& pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("url"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["url"].isNull())
        {
            url_ = std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if (pJson.isMember("type"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["type"].isNull())
        {
            type_ = std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if (pJson.isMember("post_id"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["post_id"].isNull())
        {
            postId_ = std::make_shared<uint32_t>(
                (uint32_t)pJson["post_id"].asUInt64());
        }
    }
}

const uint32_t& PostMedia::getValueOfId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if (id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint32_t>& PostMedia::getId() const noexcept
{
    return id_;
}
void PostMedia::setId(const uint32_t& pId) noexcept
{
    id_ = std::make_shared<uint32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename PostMedia::PrimaryKeyType& PostMedia::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string& PostMedia::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if (url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string>& PostMedia::getUrl() const noexcept
{
    return url_;
}
void PostMedia::setUrl(const std::string& pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[1] = true;
}
void PostMedia::setUrl(std::string&& pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[1] = true;
}
void PostMedia::setUrlToNull() noexcept
{
    url_.reset();
    dirtyFlag_[1] = true;
}

const std::string& PostMedia::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if (type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string>& PostMedia::getType() const noexcept
{
    return type_;
}
void PostMedia::setType(const std::string& pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[2] = true;
}
void PostMedia::setType(std::string&& pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[2] = true;
}
void PostMedia::setTypeToNull() noexcept
{
    type_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t& PostMedia::getValueOfPostId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if (postId_)
        return *postId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t>& PostMedia::getPostId() const noexcept
{
    return postId_;
}
void PostMedia::setPostId(const uint32_t& pPostId) noexcept
{
    postId_ = std::make_shared<uint32_t>(pPostId);
    dirtyFlag_[3] = true;
}

void PostMedia::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string>& PostMedia::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = { "url", "type", "post_id" };
    return inCols;
}

void PostMedia::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PostMedia::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void PostMedia::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PostMedia::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["id"] = getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getUrl())
    {
        ret["url"] = getValueOfUrl();
    }
    else
    {
        ret["url"] = Json::Value();
    }
    if (getType())
    {
        ret["type"] = getValueOfType();
    }
    else
    {
        ret["type"] = Json::Value();
    }
    if (getPostId())
    {
        ret["post_id"] = getValueOfPostId();
    }
    else
    {
        ret["post_id"] = Json::Value();
    }
    return ret;
}

Json::Value PostMedia::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 4)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getUrl())
            {
                ret[pMasqueradingVector[1]] = getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getType())
            {
                ret[pMasqueradingVector[2]] = getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getPostId())
            {
                ret[pMasqueradingVector[3]] = getValueOfPostId();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["id"] = getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getUrl())
    {
        ret["url"] = getValueOfUrl();
    }
    else
    {
        ret["url"] = Json::Value();
    }
    if (getType())
    {
        ret["type"] = getValueOfType();
    }
    else
    {
        ret["type"] = Json::Value();
    }
    if (getPostId())
    {
        ret["post_id"] = getValueOfPostId();
    }
    else
    {
        ret["post_id"] = Json::Value();
    }
    return ret;
}

bool PostMedia::validateJsonForCreation(const Json::Value& pJson,
                                        std::string& err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("url"))
    {
        if (!validJsonOfField(1, "url", pJson["url"], err, true))
            return false;
    }
    if (pJson.isMember("type"))
    {
        if (!validJsonOfField(2, "type", pJson["type"], err, true))
            return false;
    }
    if (pJson.isMember("post_id"))
    {
        if (!validJsonOfField(3, "post_id", pJson["post_id"], err, true))
            return false;
    }
    else
    {
        err = "The post_id column cannot be null";
        return false;
    }
    return true;
}
bool PostMedia::validateMasqueradedJsonForCreation(
    const Json::Value& pJson,
    const std::vector<std::string>& pMasqueradingVector, std::string& err)
{
    if (pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (pJson.isMember(pMasqueradingVector[0]))
            {
                if (!validJsonOfField(0, pMasqueradingVector[0],
                                      pJson[pMasqueradingVector[0]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (pJson.isMember(pMasqueradingVector[1]))
            {
                if (!validJsonOfField(1, pMasqueradingVector[1],
                                      pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (pJson.isMember(pMasqueradingVector[2]))
            {
                if (!validJsonOfField(2, pMasqueradingVector[2],
                                      pJson[pMasqueradingVector[2]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (pJson.isMember(pMasqueradingVector[3]))
            {
                if (!validJsonOfField(3, pMasqueradingVector[3],
                                      pJson[pMasqueradingVector[3]], err, true))
                    return false;
            }
            else
            {
                err =
                    "The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
    }
    catch (const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool PostMedia::validateJsonForUpdate(const Json::Value& pJson,
                                      std::string& err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for "
              "update";
        return false;
    }
    if (pJson.isMember("url"))
    {
        if (!validJsonOfField(1, "url", pJson["url"], err, false))
            return false;
    }
    if (pJson.isMember("type"))
    {
        if (!validJsonOfField(2, "type", pJson["type"], err, false))
            return false;
    }
    if (pJson.isMember("post_id"))
    {
        if (!validJsonOfField(3, "post_id", pJson["post_id"], err, false))
            return false;
    }
    return true;
}
bool PostMedia::validateMasqueradedJsonForUpdate(
    const Json::Value& pJson,
    const std::vector<std::string>& pMasqueradingVector, std::string& err)
{
    if (pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty() &&
            pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0],
                                  pJson[pMasqueradingVector[0]], err, false))
                return false;
        }
        else
        {
            err = "The value of primary key must be set in the json object for "
                  "update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() &&
            pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1],
                                  pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() &&
            pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2],
                                  pJson[pMasqueradingVector[2]], err, false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() &&
            pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3],
                                  pJson[pMasqueradingVector[3]], err, false))
                return false;
        }
    }
    catch (const Json::LogicError& e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool PostMedia::validJsonOfField(size_t index, const std::string& fieldName,
                                 const Json::Value& pJson, std::string& err,
                                 bool isForCreation)
{
    switch (index)
    {
    case 0:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (isForCreation)
        {
            err = "The automatic primary key cannot be set";
            return false;
        }
        if (!pJson.isUInt())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 1:
        if (pJson.isNull())
        {
            return true;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 2:
        if (pJson.isNull())
        {
            return true;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 3:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isUInt())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    default:
        err = "Internal error in the server";
        return false;
    }
    return true;
}
